@using Microsoft.Extensions.Localization
@using ResourceKey = PapyrusClient.Resources.Ui.Dialogs.SettingsDialog
@implements IDialogContentComponent
@inject ISettingsManager SettingsManager
@inject IStringLocalizer<SettingsDialog> Localizer

@* Header *@
<FluentDialogHeader ShowDismiss="false">
    <FluentStack Orientation="@Orientation.Horizontal"
                 HorizontalAlignment="@HorizontalAlignment.Start"
                 VerticalAlignment="@VerticalAlignment.Center">
        <FluentLabel Typo="Typography.Header">
            @Localizer[nameof(ResourceKey.DialogTitle)]
        </FluentLabel>
        <FluentSpacer/>
        <FluentButton BackgroundColor="rgba(0, 0, 0, 0)"
                      OnClick="@DiscardAsync">
            <FluentIcon Value="@(new Icons.Regular.Size24.Dismiss())"
                        Color="@(Color.Info)"/>
        </FluentButton>
    </FluentStack>
</FluentDialogHeader>

@* Body *@
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical"
                 HorizontalAlignment="HorizontalAlignment.Start"
                 VerticalAlignment="VerticalAlignment.Top"
                 Style="width: 100%; height: 100%; scrollbar-gutter: stable; overflow: auto;"
                 VerticalGap="12">

        <div style="width: 95%">
            <FluentSelect
                TOption="CultureInfo"
                Width="100%"
                Immediate="true"
                Position="SelectPosition.Below"
                Label="@Localizer[nameof(ResourceKey.SelectLanguageLabel)]"
                Items="@SettingsManager.SupportedCultures"
                OptionText="@(culture => culture.NativeName)"
                @bind-SelectedOption="@_selectedCulture"
                @bind-SelectedOption:after="@SelectedCultureChangedAsync"/>
        </div>

        <div style="width: 95%">
            <FluentSelect
                TOption="DesignThemeModes"
                Width="100%"
                Immediate="true"
                Position="SelectPosition.Below"
                Label="@Localizer[nameof(ResourceKey.SelectThemeLabel)]"
                Items="@SettingsManager.SupportedThemes"
                OptionValue="@(theme => theme.ToString("D"))"
                OptionText="@(theme => theme switch
                            {
                                DesignThemeModes.System => Localizer[nameof(ResourceKey.SelectThemeSystem)],
                                DesignThemeModes.Light => Localizer[nameof(ResourceKey.SelectThemeLight)],
                                DesignThemeModes.Dark => Localizer[nameof(ResourceKey.SelectThemeDark)],
                                _ => Localizer[nameof(ResourceKey.SelectThemeUnknown)]
                            })"
                @bind-SelectedOption="@_selectedTheme"
                @bind-SelectedOption:after="@SelectedThemeChangedAsync"/>
        </div>

        <div style="width: 95%">
            <FluentStack Orientation="@Orientation.Horizontal"
                         HorizontalAlignment="@HorizontalAlignment.Start"
                         VerticalAlignment="@VerticalAlignment.Center">
                <FluentInputLabel ForId="holidaysCalendar"
                                  Label="@Localizer[nameof(ResourceKey.CalendarHolidaysLabel)]"/>
                <FluentSpacer/>
                <FluentButton Appearance="@Appearance.Stealth"
                              OnClick="@ResetHolidaysChanges">
                    <FluentIcon Value="@(new Icons.Regular.Size24.ArrowBounce())"
                                Color="@(Color.Accent)"/>
                </FluentButton>
                <FluentButton Appearance="@Appearance.Stealth"
                              OnClick="@ClearAllHolidays">
                    <FluentIcon Value="@(new Icons.Regular.Size24.Delete())"
                                Color="@(Color.Error)"/>
                </FluentButton>
            </FluentStack>

            <FluentCalendar Id="holidaysCalendar"
                            @bind-SelectedDates="@_selectedDays"
                            @bind-SelectedDates:after="@SelectedDatesChangedAsync"
                            SelectMode="CalendarSelectMode.Multiple"
                            Culture="@SettingsManager.Culture"/>

            @if (!_holidaysStore.Any())
            {
                <FluentMessageBar Title="@Localizer[nameof(ResourceKey.MessageBarTabNoHolidaysSelectedTitle)]"
                                  Intent="@MessageIntent.Info"
                                  Type="@MessageType.Notification"
                                  AllowDismiss="@false"
                                  Style="border: 0.0625rem solid var(--accent-fill-rest)">
                    <p>@Localizer[nameof(ResourceKey.MessageBarTabNoHolidaysSelectedBody)]</p>
                </FluentMessageBar>
            }
            else
            {
                <FluentDataGrid TGridItem="DateOnly"
                                Style="width: 100%"
                                Items="@(_holidaysStore.AsQueryable())"
                                DisplayMode="@(DataGridDisplayMode.Grid)"
                                RowSize="@(DataGridRowSize.Medium)"
                                GenerateHeader="@(GenerateHeaderOption.None)">
                    <ChildContent>
                        <PropertyColumn TGridItem="DateOnly"
                                        TProp="string"
                                        Align="Align.Center"
                                        Property="@(date => date.ToString("O"))"/>
                        <TemplateColumn TGridItem="DateOnly"
                                        Align="Align.Center">
                            <FluentButton Appearance="@Appearance.Stealth"
                                          Style="width: 100%"
                                          IconStart="@(new Icons.Regular.Size24.ArrowRight().WithColor(Color.Error))"
                                          OnClick="@(() => ClearSelected(context))">
                            </FluentButton>
                        </TemplateColumn>
                    </ChildContent>
                </FluentDataGrid>
            }
        </div>

    </FluentStack>
</FluentDialogBody>

@* Footer *@
<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentButton Appearance="Appearance.Accent"
                      OnClick="@SaveAsync">
            @Localizer[nameof(ResourceKey.Save)]
        </FluentButton>
        @if (Dialog.Instance.Parameters.SecondaryActionEnabled)
        {
            <FluentButton Appearance="Appearance.Neutral"
                          OnClick="@DiscardAsync">
                @Localizer[nameof(ResourceKey.Discard)]
            </FluentButton>
        }
        <FluentSpacer/>
        <FluentButton Appearance="@Appearance.Stealth"
                      IconStart="@(new Icons.Regular.Size24.ArrowCounterclockwise())"
                      OnClick="@RefreshSettingsAsync">
            @Localizer[nameof(ResourceKey.Reload)]
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>