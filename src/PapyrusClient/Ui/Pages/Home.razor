@using ResourceKey = PapyrusClient.Resources.Ui.Pages.Home
@inject IStringLocalizer<Home> Localizer
@page "/"

<PageTitle>Home</PageTitle>

<FluentGrid AdaptiveRendering="@true"
            Justify="@JustifyContent.Center">

    <!-- Icons and Texts -->
    <FluentGridItem sm="12" md="9" lg="7" xl="7" xxl="7"
                    HiddenWhen="@GridItemHidden.XsAndDown">
        <FluentToolbar Style="width: 100%;">
            <FluentButton
                Disabled="@(_processing || _dialog != null)"
                IconStart="@(new Icons.Regular.Size24.Apps())"
                OnClick="@OpenDashboardPanelAsync">
                @Localizer[nameof(ResourceKey.BUTTON_TEXT_DASHBOARD)]
            </FluentButton>
            <FluentSpacer/>
            <FluentButton
                Disabled="@(_processing || _dialog != null)"
                IconStart="@(new Icons.Regular.Size24.ArrowDownload())"
                OnClick="@ProcessSelectedAsync">
                @Localizer[nameof(ResourceKey.BUTTON_TEXT_PROCESS)]
            </FluentButton>
            <FluentButton
                Disabled="@(_processing || _dialog != null)"
                IconStart="@(new Icons.Regular.Size24.DeleteDismiss())"
                OnClick="@RemoveSelectedAsync">
                @Localizer[nameof(ResourceKey.BUTTON_TEXT_REMOVE)]
            </FluentButton>
        </FluentToolbar>
    </FluentGridItem>

    <!-- Icons only -->
    <FluentGridItem xs="12"
                    HiddenWhen="@GridItemHidden.SmAndUp">
        <FluentToolbar Style="width: 100%;">
            <FluentButton
                Style="width: 4rem;"
                Disabled="@(_processing || _dialog != null)"
                IconStart="@(new Icons.Regular.Size24.Apps())"
                OnClick="@OpenDashboardPanelAsync"/>
            <FluentSpacer/>
            <FluentButton
                Style="width: 4rem;"
                Disabled="@(_processing || _dialog != null)"
                IconStart="@(new Icons.Regular.Size24.ArrowDownload())"
                OnClick="@ProcessSelectedAsync"/>
            <FluentButton
                Style="width: 4rem;"
                Disabled="@(_processing || _dialog != null)"
                IconStart="@(new Icons.Regular.Size24.DeleteDismiss())"
                OnClick="@RemoveSelectedAsync"/>
        </FluentToolbar>
    </FluentGridItem>

    <FluentGridItem xs="12" sm="12" md="9" lg="7" xl="7" xxl="7"
                    Justify="@JustifyContent.Center">
        @if (_processing)
        {
            <FluentMessageBar
                Title="@Localizer[nameof(ResourceKey.MESSAGEBAR_TITLE_PROCESSING_SELECTED_SCHEDULES)]"
                Intent="@MessageIntent.Info"
                Type="@MessageType.Notification"
                AllowDismiss="@false"
                Style="margin-top: 3rem; max-width: 50rem; border: 1px solid var(--accent-fill-rest)">
                <p>
                    @Localizer[nameof(ResourceKey.MESSAGEBAR_BODY_PROCESSING_SELECTED_SCHEDULES)]
                </p>
            </FluentMessageBar>
        }
        else
        {
            if (WorkScheduleStore.Count == 0)
            {
                <FluentStack Orientation="@Orientation.Vertical"
                             HorizontalAlignment="@HorizontalAlignment.Center"
                             VerticalAlignment="@VerticalAlignment.Center">
                    @for (var i = 0; i < 3; i++)
                    {
                        <div style="display: flex; width: 100%;">
                            <FluentSkeleton Style="margin-left: 0.5rem;"
                                            Shimmer="@true"
                                            Height="2rem"
                                            Width="2.5rem"/>
                            <FluentSkeleton Style="margin-left: 1rem;"
                                            Shimmer="@true"
                                            Height="2rem"
                                            Width="2.5rem"/>
                            <FluentSkeleton Style="margin-left: 1rem; margin-right: 0.5rem;"
                                            Shimmer="@true"
                                            Height="2rem"
                                            Width="100%"/>
                        </div>
                    }
                </FluentStack>
            }
            else
            {
                <FluentDataGrid TGridItem="WorkSchedule"
                                ItemKey="@(schedule => schedule.Id)"
                                Items="@WorkScheduleStore.WorkSchedules"
                                DisplayMode="@DataGridDisplayMode.Grid"
                                GenerateHeader="@GenerateHeaderOption.Default"
                                HeaderCellAsButtonWithMenu="@true"
                                ShowHover="@true"
                                Virtualize="@true"
                                OverscanCount="4"
                                ItemSize="45">
                    <ChildContent>
                        <!-- Added padding-top: 10px to center the checkbox -->
                        <SelectColumn TGridItem="WorkSchedule"
                                      Style="padding-top: 10px;"
                                      @bind-SelectedItems="@_selectedWorkSchedules"
                                      Align="@Align.Center"
                                      SelectMode="@DataGridSelectMode.Multiple"
                                      SelectFromEntireRow="@true"
                                      Selectable="@(_ => true)">
                        </SelectColumn>
                        <TemplateColumn TGridItem="WorkSchedule"
                                        Width="3rem"
                                        Align="@Align.Center"
                                        IsDefaultSortColumn="@true"
                                        Sortable="@true"
                                        SortBy="@(GridSort<WorkSchedule>.ByAscending(schedule => schedule.State))"
                                        InitialSortDirection="@SortDirection.Ascending">
                            <ChildContent>
                                <FluentButton BackgroundColor="rgba(0, 0, 0, 0)"
                                              StopPropagation="@true"
                                              OnClick="@(() => OpenWorkScheduleViewerDialogAsync(context))">
                                    @switch (context.State)
                                    {
                                        case WorkScheduleState.Ok:
                                            <FluentIcon
                                                Value="@(new Icons.Regular.Size24.Checkmark().WithColor(Color.Success))"/>
                                            break;
                                        case WorkScheduleState.ReadError:
                                        case WorkScheduleState.ValidateError:
                                            <FluentIcon
                                                Value="@(new Icons.Regular.Size24.Warning().WithColor(Color.Warning))"/>
                                            break;
                                        case WorkScheduleState.GeneralError:
                                        default:
                                            <FluentIcon
                                                Value="@(new Icons.Regular.Size24.Bug().WithColor(Color.Error))"/>
                                            break;
                                    }
                                </FluentButton>
                            </ChildContent>
                        </TemplateColumn>
                        <PropertyColumn TGridItem="WorkSchedule"
                                        TProp="string"
                                        Title="@Localizer[nameof(ResourceKey.DATAGRID_COLUMN_TITLE_SCHEDULES)]"
                                        Align="@Align.Start"
                                        Property="@(schedule => schedule.Metadata.Name)"
                                        Sortable="@true"
                                        SortBy="@(GridSort<WorkSchedule>.ByAscending(schedule => schedule.Metadata.Name))"/>
                    </ChildContent>
                </FluentDataGrid>
            }
        }
    </FluentGridItem>

</FluentGrid>