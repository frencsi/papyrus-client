@page "/"
@inject ILogger<Home> Logger
@inject IJSRuntime Js
@inject IToastService ToastService
@inject IDialogService DialogService
@inject ISettingsManager SettingsManager
@inject IWorkScheduleReader WorkScheduleReader
@inject IWorkScheduleValidator WorkScheduleValidator
@inject ITimeSheetWriter TimeSheetWriter

<PageTitle>Papyrus</PageTitle>

<FluentGrid AdaptiveRendering="@true"
            Spacing="2"
            Justify="@JustifyContent.Center">

    <FluentGridItem xs="12" sm="12" md="9" lg="7" xl="7" xxl="7">

        <FluentInputFile Id="work-schedule-file-uploader"
                         Style="min-height: 14rem;"
                         Disabled="@(_state != Status.Idle || _dialog != null)"
                         Multiple="@true"
                         Mode="@InputFileMode.Stream"
                         MaximumFileCount="@MaximumFileCountPerLoad"
                         MaximumFileSize="@int.MaxValue"
                         Accept="@string.Join(", ", WorkScheduleReader.SupportedFileExtensions)"
                         OnFileCountExceeded="@OnFileCountExceeded"
                         OnFileUploaded="@OnFileLoadedAsync"
                         OnCompleted="@OnFileLoadCompleted">
            <!-- Using ChildContent as a progress bar since ProgressTemplate is not responsive -->
            <ProgressTemplate>
                <span></span>
            </ProgressTemplate>
            <ChildContent>
                <div style="margin: 1rem;">
                    <FluentStack Orientation="Orientation.Vertical"
                                 HorizontalAlignment="HorizontalAlignment.Center"
                                 VerticalAlignment="VerticalAlignment.Top">
                        @switch (_state)
                        {
                            case Status.Idle when _dialog == null:
                            {
                                <label for="work-schedule-file-uploader">
                                    <FluentIcon Value="@(new Icons.Regular.Size24.ArrowUpload())"/>
                                </label>

                                <div>
                                    Drag Excel files here to load, or
                                    <label
                                        for="work-schedule-file-uploader">browse</label>
                                    for
                                    them.
                                    <br/>
                                    <em>Up to @MaximumFileCountPerLoad files are allowed per load.</em>
                                </div>

                                <div>
                                    <br/>
                                    Supported file formats:
                                    [
                                    <span> </span>
                                    @foreach (var extension in WorkScheduleReader.SupportedFileExtensions)
                                    {
                                        <a href="#">@extension</a>
                                        <span> </span>
                                    }
                                    ]
                                    <br/>
                                </div>
                                break;
                            }
                            case Status.Loading:
                                <FluentIcon Value="@(new Icons.Regular.Size24.Hourglass())"/>

                                <div style="width: 7rem;">
                                    <FluentProgress Min="0"
                                                    Max="100"
                                                    Value="@_loadProgressPercent"/>
                                </div>

                                <div style="font-size: 0.7rem;">
                                    @_loadFileName
                                </div>
                                break;
                            case Status.Processing:
                            default:
                                <FluentIcon Value="@(new Icons.Regular.Size24.Dismiss())"/>

                                break;
                        }
                    </FluentStack>
                </div>
            </ChildContent>
        </FluentInputFile>

    </FluentGridItem>

    <FluentGridItem sm="12" md="9" lg="7" xl="7" xxl="7"
                    HiddenWhen="@GridItemHidden.XsAndDown">

        <FluentToolbar Style="width: 100%; height: 3rem;">
            <FluentButton Style="min-width: 4rem;"
                          Appearance="@Appearance.Stealth"
                          IconStart="@(new Icons.Regular.Size24.Settings())"
                          Disabled="@(_state != Status.Idle || _dialog != null)"
                          OnClick="@OpenSettingsDialogAsync">
            </FluentButton>
            <FluentSpacer/>
            <FluentButton Appearance="@Appearance.Accent"
                          IconStart="@(new Icons.Regular.Size24.ArrowDown())"
                          Disabled="@(_state != Status.Idle || _dialog != null)"
                          OnClick="@ProcessSelectedFilesAsync">
                Process
            </FluentButton>
            <FluentButton Appearance="@Appearance.Neutral"
                          IconStart="@(new Icons.Regular.Size24.Delete())"
                          Disabled="@(_state != Status.Idle || _dialog != null)"
                          OnClick="@RemoveSelectedFiles">
                Remove
            </FluentButton>
        </FluentToolbar>

    </FluentGridItem>

    <FluentGridItem xs="12"
                    HiddenWhen="@GridItemHidden.SmAndUp">

        <FluentToolbar Style="width: 100%; height: 3rem;">
            <FluentButton Style="min-width: 4rem;"
                          Appearance="@Appearance.Stealth"
                          IconStart="@(new Icons.Regular.Size24.Settings())"
                          Disabled="@(_state != Status.Idle || _dialog != null)"
                          OnClick="@OpenSettingsDialogAsync">
            </FluentButton>
            <FluentSpacer/>
            <FluentButton Style="min-width: 4rem;"
                          Appearance="@Appearance.Accent"
                          IconStart="@(new Icons.Regular.Size24.ArrowDown())"
                          Disabled="@(_state != Status.Idle || _dialog != null)"
                          OnClick="@ProcessSelectedFilesAsync">
            </FluentButton>
            <FluentButton Style="min-width: 4rem;"
                          Appearance="@Appearance.Neutral"
                          IconStart="@(new Icons.Regular.Size24.Delete())"
                          Disabled="@(_state != Status.Idle || _dialog != null)"
                          OnClick="@RemoveSelectedFiles">
            </FluentButton>
        </FluentToolbar>

    </FluentGridItem>

    <FluentGridItem xs="12" sm="12" md="9" lg="7" xl="7" xxl="7"
                    Justify="JustifyContent.Center">

        @switch (_state)
        {
            case Status.Idle:
                @if (WorkScheduleFiles.Count != 0)
                {
                    <FluentDataGrid TGridItem="WorkScheduleFile"
                                    ItemKey="@(file => file.Id)"
                                    Items="@WorkScheduleFiles.AsQueryable()"
                                    DisplayMode="@DataGridDisplayMode.Grid"
                                    GenerateHeader="@GenerateHeaderOption.Default"
                                    HeaderCellAsButtonWithMenu="@true"
                                    ShowHover="@true"
                                    Virtualize="@true"
                                    OverscanCount="4"
                                    ItemSize="45">
                        <ChildContent>
                            <!-- Added padding-top: 10px to center the checkbox -->
                            <SelectColumn TGridItem="WorkScheduleFile"
                                          Style="padding-top: 10px;"
                                          @bind-SelectedItems="@_selectedWorkScheduleFiles"
                                          Align="@Align.Center"
                                          SelectMode="@DataGridSelectMode.Multiple"
                                          SelectFromEntireRow="@true"
                                          Selectable="@(_ => true)">
                            </SelectColumn>
                            <TemplateColumn TGridItem="WorkScheduleFile"
                                            Width="3rem"
                                            Align="@Align.Center"
                                            IsDefaultSortColumn="@true"
                                            Sortable="@true"
                                            SortBy="@(GridSort<WorkScheduleFile>.ByAscending(file => file.Status.State))"
                                            InitialSortDirection="@SortDirection.Ascending">
                                <ChildContent>
                                    <FluentButton BackgroundColor="rgba(0, 0, 0, 0)"
                                                  StopPropagation="@true"
                                                  OnClick="@(() => OpenFileDetailsDialogAsync(context))">
                                        @switch (context.Status.State)
                                        {
                                            case WorkScheduleFileState.Ok:
                                                <FluentIcon
                                                    Value="@(new Icons.Regular.Size24.Checkmark().WithColor(Color.Success))"/>
                                                break;
                                            case WorkScheduleFileState.ReadError:
                                            case WorkScheduleFileState.ValidateError:
                                                <FluentIcon
                                                    Value="@(new Icons.Regular.Size24.Warning().WithColor(Color.Warning))"/>
                                                break;
                                            case WorkScheduleFileState.GeneralError:
                                            default:
                                                <FluentIcon
                                                    Value="@(new Icons.Regular.Size24.Bug().WithColor(Color.Error))"/>
                                                break;
                                        }
                                    </FluentButton>
                                </ChildContent>
                            </TemplateColumn>
                            <PropertyColumn TGridItem="WorkScheduleFile"
                                            TProp="string"
                                            Title="File"
                                            Align="@Align.Start"
                                            Property="@(file => file.Name)"
                                            Sortable="@true"
                                            SortBy="@(GridSort<WorkScheduleFile>.ByAscending(file => file.Name))"/>
                        </ChildContent>
                    </FluentDataGrid>
                }
                else
                {
                    <FluentStack Orientation="Orientation.Vertical"
                                 HorizontalAlignment="HorizontalAlignment.Center"
                                 VerticalAlignment="VerticalAlignment.Center">
                        @for (var i = 0; i < 3; i++)
                        {
                            <div style="display: flex; width: 100%;">
                                <FluentSkeleton Style="margin-left: 0.5rem;"
                                                Shimmer="@true"
                                                Height="2rem"
                                                Width="2.5rem"/>
                                <FluentSkeleton Style="margin-left: 1rem;"
                                                Shimmer="@true"
                                                Height="2rem"
                                                Width="2.5rem"/>
                                <FluentSkeleton Style="margin-left: 1rem; margin-right: 0.5rem;"
                                                Shimmer="@true"
                                                Height="2rem"
                                                Width="100%"/>
                            </div>
                        }
                    </FluentStack>
                }

                break;

            case Status.Loading or Status.Processing:
                <FluentMessageBar Title="@(_state == Status.Loading ? "Loading Files(s)" : "Processing File(s)")"
                                  Intent="@MessageIntent.Info"
                                  Type="@MessageType.Notification"
                                  AllowDismiss="@false"
                                  Style="max-width: 40rem; border: 0.0625rem solid var(--accent-fill-rest)">
                    <p>The browser window may freeze temporarily during this process.</p>
                </FluentMessageBar>
                break;

            default:
                    throw new ArgumentOutOfRangeException(nameof(_state), _state, $"Unhandled state: '{_state}' in '{nameof(Home)}' page");
        }

    </FluentGridItem>

</FluentGrid>